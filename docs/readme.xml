<?xml version="1.0" encoding="UTF-8"?>
<!-- $Id$ -->
<!-- This file uses the question and answer dtd
     QAML Version 2.4. More info about it can be found in the dtd file. 
     There should be some xslt stylesheets in this distribution
     which produce ascii, html and pdf files 

Usage of attributes: 
  section: attr "class" has the value "level1", "level2" etc. to mark the level of nesting
        p: attr "class" can have "pre" (for code) or "li" for lists. No class attr is the normal
-->

<?xml-stylesheet type="text/css" href="qaml.css"?>
<!DOCTYPE faq SYSTEM "qaml-xml.dtd">

<faq>

<head>
   <title>FOP: An Open-Source XSL Formatter and Renderer</title>
   <version>1.4 1999/11/29 19:45</version>
   <maintain>
      <name>James Tauber</name> 
      <name>Fotis Jannidis</name> 
      <email>jtauber@jtauber.com</email>
      <email>jannidis@lrz.uni-muenchen.de</email><subject>FOP</subject>
   </maintain>
</head>

<body>

<section class="level1">
  <title>What is FOP?</title>
  <p>FOP is the world's first print formatter driven by XSL formatting
     objects. It is a Java 1.1 application that reads a formatting object
     tree and then turns it into a PDF document. The formatting object
     tree, can be in the form of an XML document (output by an XSLT engine
     like XT or Xalan) or can be passed in memory as a DOM Document or (in
     the case of XT) SAX events.

  </p>
  <p>FOP is part of Apache's XML project. The homepage of FOP is 
     <link href="http:/xml.apache.org/fop">http:/xml.apache.org/fop</link>. 
  </p>
</section>

<!-- Compiling FOP -->

<section  class="level1">
  <title>Compiling FOP</title>
  <section class="level2">
    <title>1. Prerequisites</title>
    <section class="level3">
      <title>a) Java 1.1.x or later</title>
      <p></p>
    </section>
    <section class="level3">
      <title>b) An XML parser</title>
      <p>An XML parser which supports DOM like 
         <link href="http://xml.apache.org/xerces-j/index.html">Xerces-J</link>.</p>
    </section>
    <section class="level3">
      <title>c) XT from James Clark</title>
      <p>Some of the Java source code in FOP is generated from XML using
         XSLT. XT must be used to generate this code.</p>
      <p>XT is an XSL stylesheet processor written in java. At the moment you
         can't use any other processor, because the make file makes use of some
         proprietary features of Clark's xt which allow to write output in more
         then one document. You can find XT at <link href="http://www.jclark.com/xml/xt.html">
        James Clark's website</link>. You have to use XT version 19991105 or later.</p>
      <p>(Under windows you shouldn't use the prepackaged xt.exe but also the
         generic jar file, otherwise make won't work)
      </p>
      <p>XT relies on an sax parser like XP (also J. Clark), which can be
         downloaded at <link href="http://www.jclark.com/xml/xp/index.html">James 
         Clark's Website</link>
      </p>
    </section>
    <section class="level3">
      <title>d) make</title>
      <p>Under windows it has been reported that the use of the cygnus solutions port 
         of the GNU utilities works. You can find it at 
         <link href="http://sourceware.cygnus.com/cygwin/">Cygnus Solutions</link>
      </p>
    </section>
  </section>
</section>

<!-- Running FOP -->

<section  class="level1">
  <title>Running FOP</title>
  <section class="level2">
    <title>1) Prerequisites</title>
    <p>Following software must be installed:</p>
    <p>a) Java 1.1.x or later</p>
    <p>b) An XML parser which supports SAX and DOM like 
          <link href="http://xml.apache.org/xerces-j/index.html">Xerces-J</link>.</p>
    <p>c) If you have to produce the flow objects files, which are the input for FOP, 
       you need a transformation utility to create this files from your xml files. 
       Normally this is an XSLT stylesheet processor like 
       <link href="http://www.jclark.com/xml/xt.html">XT</link> 
       or <link href="http://xml.apache.org/xalan/index.html">XALAN</link>. 
    </p>
  </section>
  <section class="level2">
    <title>2) Starting FOP as an standalone application</title>
    <p>There are three ways of running FOP from the command line.</p>
    <p>a) Batch processing formatting object files: </p>
    <p class="pre">java org.apache.fop.apps.CommandLine fo-file pdf-file</p>
    <p>b) Batch processing xml files (includes production of the fo-files):</p>
    <p class="pre">java org.apache.fop.apps.CommandLine xml-file xsl-file pdf-file</p>
    <p>c) Previewing the fo-file:</p>
    <p class="pre">java org.apache.fop.apps.AWTCommandLine fo-file</p>
    <p>Each method uses next to the fop classes other packages. The following describes 
       each method in detail.</p>
    <section class="level3">
      <title>a) Method One</title>
      <p>One is to first use an XSLT engine to produce the formatting object tree as an 
         XML document and then running the class org.apache.fop.apps.CommandLine with the
         formatting object file name and PDF filename as arguments. You will need to include 
         FOP, SAX and your SAX Parser in your classpath and so you might invoke 
      </p>
      <p class="pre">java -cp fop_x_xx_x.jar;sax.jar;xp.jar</p>
      <p class="pre">org.apache.fop.apps.CommandLine formatting-tree-file pdf-file</p>
      <p>If your SAX Parser is other than XP, you will need to set the property 
         org.xml.sax.parser to the SAX Parser class to use. The following example shows 
         the command line, if you use Xerces, the xml parser from xml.apache.org: 
      </p>
      <p class="pre">java -Dorg.xml.sax.parser=org.apache.xerces.parsers.SAXParser </p>
      <p class="pre">-cp fop_x_xx_x.jar;xerces.jar</p>
      <p class="pre">org.apache.fop.apps.AWTCommandLine formatting-tree-file pdf-file</p>
    </section>
    <section class="level3">
      <title>b) Method Two</title>
      <p>Rather than performing transformation with an XSLT before invoking FOP, it is 
         possible, if you use XT as your XSLT engine, to just call FOP and have it call 
         XT for you. To do this, run the class org.apache.fop.apps.CommandLine with the 
         source XML file name, XSL file name and PDF file name as arguments. You will 
         need to include FOP, SAX, your SAX Parser and XT in your classpath and so you might 
         invoke 
      </p>
      <p class="pre">java -cp fop_x_xx_x.jar;sax.jar;xp.jar;xt.jar</p>
      <p class="pre">org.apache.fop.apps.CommandLine xml-file xsl-file pdf-file</p>
      <p>Again, if your SAX Parser is other than XP, you will need to set the property
         org.xml.sax.parser to the SAX Parser class to use.
      </p>
    </section>
    <section class="level3">
      <title>c) Method Three</title>
      <p>If you already produced the FO file, you can preview the results of your 
         transformation without using any pdf viewer by invoking FOP with the viewer 
         application. You will need to include FOP, SAX and your SAX Parser in your classpath 
      </p>
      <p class="pre">java org.apache.fop.apps.AWTCommandLine formatting-tree-file </p>
      <p>Note: If you are using java 2 or later (i.e. jdk 1.2. or later) you can put all 
         needed jar files into the subdirectory jdk1.2.x\jre\lib\ext (windows example). Then 
         FOP can be started without classpath: 
      </p>
      <p class="pre">java org.apache.fop.apps.CommandLine fo-file pdf-file</p>
    </section>
  </section>
</section>

<!-- What's Implemented? -->

<section  class="level1">
  <title>What's Implemented?</title>
      <p>Also see STATUS for what is being worked on.</p>
  <section class="level2">
    <title>a) Formatting Objects</title>
    <div class="list">
      <p class="li">root </p>
      <p class="li">layout-master-set </p>
      <p class="li">simple-page-master </p>
      <p class="li">region-body </p>
      <p class="li">region-before </p>
      <p class="li">region-after </p>
      <p class="li">page-sequence </p>
      <p class="li">sequence-specification </p>
      <p class="li">sequence-specifier-single </p>
      <p class="li">sequence-specifier-repeating </p>
      <p class="li">sequence-specifier-alternating </p>
      <p class="li">flow </p>
      <p class="li">static-content </p>
      <p class="li">block </p>
      <p class="li">list-block </p>
      <p class="li">list-item </p>
      <p class="li">list-item-label </p>
      <p class="li">list-item-body </p>
      <p class="li">page-number </p>
      <p class="li">display-sequence </p>
      <p class="li">inline-sequence </p>
      <p class="li">display-rule </p>
      <p class="li">display-graphic </p>
      <p class="li">table (minimal support)</p>
      <p class="li">table-column (minimal support)</p>
      <p class="li">table-body (minimal support)</p>
      <p class="li">table-row (minimal support)</p>
      <p class="li">table-cell (minimal support)</p>

</div>
  </section>
  <section class="level2">
    <title>b) Properties</title>
    <div class="list">
      <p class="li">end-indent </p>
      <p class="li">page-master-name </p>
      <p class="li">page-master-first </p>
      <p class="li">page-master-repeating </p>
      <p class="li">page-master-odd </p>
      <p class="li">page-master-even </p>
      <p class="li">margin-top (only on pages and regions)</p>
      <p class="li">margin-bottom (only on pages and regions)</p>
      <p class="li">margin-left (only on pages and regions)</p>
      <p class="li">margin-right (only on pages and regions)</p>
      <p class="li">extent </p>
      <p class="li">page-width </p>
      <p class="li">page-height </p>
      <p class="li">flow-name </p>
      <p class="li">font-family </p>
      <p class="li">font-style </p>
      <p class="li">font-weight </p>
      <p class="li">font-size </p>
      <p class="li">line-height </p>
      <p class="li">text-align </p>
      <p class="li">text-align-last </p>
      <p class="li">space-before.optimum </p>
      <p class="li">space-after.optimum </p>
      <p class="li">start-indent </p>
      <p class="li">end-indent </p>
      <p class="li">provisional-distance-between-starts </p>
      <p class="li">provisional-label-separation </p>
      <p class="li">rule-thickness </p>
      <p class="li">color </p>
      <p class="li">wrap-option </p>
      <p class="li">white-space-treatment </p>
      <p class="li">break-before </p>
      <p class="li">break-after </p>
      <p class="li">text-indent </p>
      <p class="li">href</p>
      <p class="li">column-width</p>
      <p class="li">background-color</p>
      <p class="li">padding-top (only in conjunction with background color)</p>
      <p class="li">padding-left (only in conjunction with background color)</p>
      <p class="li">padding-bottom (only in conjunction with background color)</p>
      <p class="li">padding-right (only in conjunction with background color)</p>
    </div>
  </section>
</section>

<!-- Bugs -->

<section class="level1">
  <title>Bugs</title>
  <p>see STATUS file</p>
</section>

<!-- FOP Relevant Specifications -->

<section class="level1">
  <title>FOP Relevant Specifications</title>
  <div class="list">
    <p class="li"><link href="http://www.w3.org/TR/REC-xml">XML Recommendation</link></p>
    <p class="li"><link href="http://www.w3.org/TR/WD-xsl/">XSL-FO Working Draft</link></p>
    <p class="li"><link href="http://www.w3.org/TR/xslt">XSLT Recommandation</link></p>
    <p class="li"><link href="http://partners.adobe.com/asn/developer/acrosdk/DOCS/pdfspec.pdf">PDF Documentation</link></p>
    <p class="li"><link href="http://www.megginson.com/SAX/">Simple API for XML (SAX)</link></p>
    <p class="li"><link href="http://www.w3.org/TR/REC-DOM-Level-1">Document Object Model (DOM)</link></p>
    <p class="li"><link href="http://www.w3.org/TR/REC-xml-names/">Namespaces in XML Recommendation</link></p>
    <p class="li"><link href="http://java.sun.com/products/jdk/1.1/docs/index.html">Java JDK 1.1 Documentation</link></p>
  </div>
</section>

</body>
</faq>
