/*
 * $Id$
 * Copyright (C) 2001 The Apache Software Foundation. All rights reserved.
 * For details on use and redistribution please refer to the
 * LICENSE file included with these sources.
 */

package org.apache.fop.layoutmgr;


import org.apache.fop.area.Area;
import org.apache.fop.area.Resolveable;
import org.apache.fop.area.PageViewport;

/**
 * The interface for all LayoutManagers.
 */
public interface LayoutManager {
    public boolean generatesInlineAreas();
    public Area getParentArea (Area childArea);
    public boolean addChild (Area childArea);
    public void setParentLM(LayoutManager lm);

    /**
     * Return true if the next area which would be generated by this
     * LayoutManager could start a new line (or flow for block-level FO).
     */
    public boolean canBreakBefore(LayoutContext lc);

    /**
     * Generate and return the next break possibility.
     * @param context The layout context contains information about pending
     * space specifiers from ancestor areas or previous areas, reference
     * area inline-progression-dimension and various other layout-related
     * information.
     */
    public BreakPoss getNextBreakPoss(LayoutContext context);


    /**
     * Return a value indicating whether this LayoutManager has laid out
     * all its content (or generated BreakPossibilities for all content.)
     */
    public boolean isFinished();

    /**
     * Set a flag indicating whether the LayoutManager has laid out all
     * its content. This is generally called by the LM itself, but can
     * be called by a parentLM when backtracking.
     */
    public void setFinished(boolean isFinished);

    /**
     * Tell the layout manager to add all the child areas implied
     * by Position objects which will be returned by the
     * Iterator.
     */
    public void addAreas(PositionIterator posIter, LayoutContext context);

    public void init();

    public void resetPosition(Position position);

    public void getWordChars(StringBuffer sbChars, Position bp1,
                             Position bp2);

    public String getCurrentPageNumber();

    public PageViewport resolveRefID(String ref);

    public void addIDToPage(String id);

    public void addUnresolvedArea(String id, Resolveable res);
}
