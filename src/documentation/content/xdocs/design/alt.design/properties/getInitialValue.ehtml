<?xml version="1.0"?>
<html>
  <body marginheight="0" marginwidth="0" topmargin="0" leftmargin="0" text="#000000" bgcolor="#FFFFFF">
    <script type="text/javascript" src="codedisplay.js" />
    <div class="content">
      <h1>Generating Initial Values</h1>
      <p>
        <font size="-2">by Peter B. West</font>
      </p>
      <ul class="minitoc">
        <li>
          <a href="#N10014">Introduction</a>
        </li>
        <li>
          <a href="#N10021">
            Generating and Accessing Initial Values
          </a>
          <ul class="minitoc">
            <li>
              <a href="#N10062">Properties without
                getInitialValue()</a>
            </li>
          </ul>
        </li>
      </ul>
      
      <a name="N10014"></a>
      <h3>Introduction</h3>
      <p>
        The <a href="simple-properties.html">previous section</a>
        discussed the common data elements in the simplest examples of
        property classes.  This section discusses more complex classes
        whose facilities are accessed only through various methods.
      </p>
      
      <a name="N10021"></a>
      <h3>
        Generating and Accessing Initial Values
      </h3>
      <!-- N.B. height for toggleCode changed from 50% to 400 because
          Mozilla seems to get confused by percentage heights within
          table elements.
      -->
      <p>
        
        <span id = "span00" ></span ><a href= "javascript:toggleCode(
        'span00', 'AutoRestore.html', '400', '100%' )" ><span
        class="codefrag"
        >org.apache.fop.fo.properties.AutoRestore</span></a> is an
        example of the next most complex property class.  In addition
        to all of the common static fields, these classes have initial
        data value types which require the dynamic generation of a
        PropertyValue instance.
      </p>
      <p>
        The method <span id = "span01" ></span ><a href=
        "javascript:toggleCode( 'span01',
        'AutoRestore.html#getInitialValue', '400', '100%' )" ><span
        class="codefrag">PropertyValue getInitialValue(int)</span></a>
        returns an instance of PropertyValue of the appropriate
        subclass containing the initial value for this property.  Like
        the static data fields, this value is, in turn, stored in the
        array of initial values maintained in the <span id = "span02"
        ></span ><a href= "javascript:toggleCode( 'span02',
        'PropertyConsts.html#PropertyConstsClass', '400', '100%' )"
        ><span class="codefrag">PropertyConsts</span></a> singleton
        <span id = "span03" ></span ><a href= "javascript:toggleCode(
        'span03', 'PropertyConsts.html#pconsts', '400', '100%' )"
        ><span class="codefrag">pconsts</span></a>.` As with the
        fields, the first invocation of the method <span id = "span04"
        ></span ><a href= "javascript:toggleCode( 'span04',
        'PropertyConsts.html#setupProperty', '400', '100%' )" ><span
        class="codefrag">setupProperty</span></a> on the property
        instantiates the singleton instance of the class, and stores
        that instance in the in the <span id = "span05" ></span ><a
        href= "javascript:toggleCode( 'span05',
        'PropertyConsts.html#properties', '400', '100%' )" ><span
        class="codefrag">Property[] properties</span></a> array of
        <span id = "span06" ></span ><a href= "javascript:toggleCode(
        'span06', 'PropertyConsts.html#pconsts', '400', '100%' )"
        ><span class="codefrag">pconsts</span></a>.
      </p>
      <p>
        Unlike the static data fields, however, the initial value is
        not immediately generated.  It is generated by a call to <span
        id = "span07" ></span ><a href= "javascript:toggleCode(
        'span07', 'PropertyConsts.html#getInitialValue', '400', '100%'
        )" ><span class="codefrag">PropertyValue
        getInitialValue(int)</span></a> in <span id = "span08" ></span
        ><a href= "javascript:toggleCode( 'span08',
        'PropertyConsts.html#pconsts', '400', '100%' )" ><span
        class="codefrag">pconsts</span></a>.  This call, in turn,
        locates the relevant instance of the particular property class
        in the <span id = "span09" ></span ><a href=
        "javascript:toggleCode( 'span09',
        'PropertyConsts.html#properties', '400', '100%' )" ><span
        class= "codefrag" >properties</span> array of <span class=
        "codefrag" >PropertyConsts</span></a>, and invokes the <span
        class= "codefrag" >getInitialValue()</span> of that instance.
        A side-effect of this call is to store the initial value in
        <span id = "span10" ></span ><a href= "javascript:toggleCode(
        'span10', 'PropertyConsts.html#initialValues', '400', '100%'
        )" ><span class="codefrag">PropertyValue[]
        initialValues</span></a>.
      </p>
      <a name="N10062"></a>
      <h4>Properties without
        getInitialValue()</h4>
      <p>
        What about property classes which have no <span
        class="codefrag">getInitialValue()</span> method?  The
        simplest classes, e.g. <span
        class="codefrag">Character</span>, fall into this category.
        As <a href="classes-overview.html#property-classes">noted
        previously</a>, all of the property classes extend <span
        class="codefrag">org.apache.fop.fo.properties.Property</span>.
        <span id = "span11" ></span ><a href= "javascript:toggleCode(
        'span11', 'Property.html#PropertyClass', '400', '100%' )"
        ><span class="codefrag">Property</span></a> provides a base
        <span id = "span12" ></span ><a href= "javascript:toggleCode(
        'span12', 'Property.html#getInitialValue', '400', '100%' )"
        ><span class="codefrag">PropertyValue
        getInitialValue(int)</span></a> method to which the simple
        classes fall back.  Note that it is only valid for <span
        class="codefrag">NOTYPE_IT</span>, <span
        class="codefrag">AUTO_IT</span>, <span
        class="codefrag">NONE_IT</span> and <span
        class="codefrag">AURAL_IT</span> initial value types, so all
        classes which have any other initial value type must override
        this method.
      </p>

      <p>
        <strong>Previous:</strong> <a href = "simple-properties.html"
        >Simple property classes</a>
      </p>
      <p>
        <strong>Next:</strong> <a href= "enumerated-values.html"
                                  >Enumerated values</a>
      </p>
      
    </div>
  </body>
</html>
