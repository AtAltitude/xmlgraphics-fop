<?xml version="1.0" standalone="no"?>
<!DOCTYPE document PUBLIC "-//APACHE//DTD Documentation V1.1//EN"
    "http://cvs.apache.org/viewcvs.cgi/*checkout*/xml-forrest/src/resources/schema/dtd/document-v11.dtd">
<document>
  <header>
    <title>Property Methods Access</title>
    <authors>
      <person id="pbw" name="Peter B. West" email="pbwest@powerup.com.au"/>
    </authors>
  </header>
  <body>
    <section>
      <title>Introduction</title>
      <p>
        The <link href= "property-data.html" >previous section</link>
        discussed the common data elements in the simplest examples of
        &lt;property&gt: classes.  This section discusses more complex
        classes whose facilities are accessed only through various
        methods.
      </p>
    </section>
    <section>
      <title>Generating &amp; Accessing Initial Values</title>
      
      <p>
        <fork href= "AutoRestore.html"
        >org.apache.fop.fo.properties.AutoRestore</fork> is an example
        of a the next most complex &lt;property&gt; class.  In
        addition to all of the common static fields, these classes
        have initial data value types which require the dynamic
        generation of a PropertyValue instance.
      </p>

      <p>
        The method <code >PropertyValue getInitialValue(int)</code >
        returns an instance of PropertyValue of the appropriate
        subclass containing the initial value for this
        &lt;property&gt;.  Like the static data fields, this value is,
        in turn, stored in the array of initial values maintained in
        the <fork href= "../PropertyConsts.html" ><code
        >PropertyConsts</code ></fork> singleton <fork href=
        "../PropertyConsts.html#pconsts" ><code >pconsts</code
        ></fork>.` As with the fields, the first invocation of the
        method <fork href= "../PropertyConsts.html#setupProperty"
        ><code >setupProperty</code ></fork> on the property
        instantiates the singleton instance of the class, and stores
        that instance in the in the <fork href=
        "../PropertyConsts.html#properties" ><code >Property[]
        properties</code ></fork> array of <fork href=
        "../PropertyConsts.html#pconsts" ><code >pconsts</code
        ></fork>.
      </p>

      <p>
        Unlike the static data fields, however, the initial value is
        not immediately generated.  It is generated by a call to <fork
        href= "../PropertyConsts.html#getInitialValue" ><code
        >PropertyValue getInitialValue(int)</code ></fork> in <fork
        href= "../PropertyConsts.html#pconsts" ><code >pconsts</code
        ></fork>.  A side-effect of this call is to store the initial
        value in <fork
        href="../PropertyConsts.html#initialValues"><code
        >PropertyValue[] initialValues</code ></fork>.
      </p>
      
    </section>
  </body>
</document>
