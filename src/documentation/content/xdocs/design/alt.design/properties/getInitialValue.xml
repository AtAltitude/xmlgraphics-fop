<?xml version="1.0" standalone="no"?>
<!DOCTYPE document PUBLIC "-//APACHE//DTD Documentation V1.1//EN"
    "http://cvs.apache.org/viewcvs.cgi/*checkout*/xml-forrest/src/resources/schema/dtd/document-v11.dtd">
<document>
  <header>
    <title>Generating Initial Values</title>
    <authors>
      <person id="pbw" name="Peter B. West" email="pbwest@powerup.com.au"/>
    </authors>
  </header>
  <body>
    <section>
      <title>Introduction</title>
      <p>
        The <link href= "property-data.html" >previous section</link>
        discussed the common data elements in the simplest examples of
        property classes.  This section discusses more complex classes
        whose facilities are accessed only through various methods.
      </p>
    </section>
    <section>
      <title id= "initial-values" >
        Generating &amp; Accessing Initial Values
      </title>
      
      <p>
        <fork href= "AutoRestore.html" ><code
        >org.apache.fop.fo.properties.AutoRestore</code ></fork> is an
        example of a the next most complex property class.  In
        addition to all of the common static fields, these classes
        have initial data value types which require the dynamic
        generation of a PropertyValue instance.
      </p>

      <p>
        The method <fork href= "AutoRestore.html#getInitialValue"
        ><code >PropertyValue getInitialValue(int)</code ></fork >
        returns an instance of PropertyValue of the appropriate
        subclass containing the initial value for this property.  Like
        the static data fields, this value is, in turn, stored in the
        array of initial values maintained in the <fork href=
        "../PropertyConsts.html" ><code >PropertyConsts</code ></fork>
        singleton <fork href= "../PropertyConsts.html#pconsts" ><code
        >pconsts</code ></fork>.` As with the fields, the first
        invocation of the method <fork href=
        "../PropertyConsts.html#setupProperty" ><code
        >setupProperty</code ></fork> on the property instantiates the
        singleton instance of the class, and stores that instance in
        the in the <fork href= "../PropertyConsts.html#properties"
        ><code >Property[] properties</code ></fork> array of <fork
        href= "../PropertyConsts.html#pconsts" ><code >pconsts</code
        ></fork>.
      </p>

      <p>
        Unlike the static data fields, however, the initial value is
        not immediately generated.  It is generated by a call to <fork
        href= "../PropertyConsts.html#getInitialValue" ><code
        >PropertyValue getInitialValue(int)</code ></fork> in <fork
        href= "../PropertyConsts.html#pconsts" ><code >pconsts</code
        ></fork>.  A side-effect of this call is to store the initial
        value in <fork
        href="../PropertyConsts.html#initialValues"><code
        >PropertyValue[] initialValues</code ></fork>.
      </p>
      <section>
        <title>Properties without
        <code>getInitialValue()</code></title>
        <p>
          What about property classes which have no
          <code>getInitialValue()</code> method?  The simplest
          classes, e.g. <code>Character</code>, fall into this
          category.  As <link href=
          "classes-overview.html#property-classes" >noted
          previously</link >, all of the property classes extend <code
          >org.apache.fop.fo.properties.Property</code >.  <fork href=
          "Property.html" ><code >Property</code ></fork > provides a
          base <fork href= "Property.html#getInitialValue" ><code
          >PropertyValue getInitialValue(int)</code ></fork> method to
          which the simple classes fall back.  Note that it is only
          valid for <code >NOTYPE_IT</code >, <code >AUTO_IT</code >,
          <code >NONE_IT</code > and <code >AURAL_IT</code > initial
          value types, so all classes which have any other initial
          value type must override this method.
        </p>
      </section>
    </section>
  </body>
</document>
