<?xml version="1.0"?>
<html>
  <body marginheight="0" marginwidth="0" topmargin="0" leftmargin="0"
        text="#000000" bgcolor="#FFFFFF">
    <script type="text/javascript" src="codedisplay.js" />
    <div class="content">
      <h1>PropertyConsts Description</h1>
      <p>
        <font size="-2">by Peter B. West</font>
      </p>
      <ul class="minitoc">
        <li>
          <a href="#N10014">Introduction</a>
        </li>
      </ul>
      
      <a name="N10014"></a>
      <h3>Introduction</h3>
      <p>
        
        <span id = "span00" ></span ><a href="javascript:toggleCode(
        'span00', 'PropertyConsts.html#PropertyConstsClass', '400',
        '100%' )">This class</a>, and the singleton object which is
        <span id = "span01" ></span ><a href="javascript:toggleCode(
        'span01', 'PropertyConsts.html#pconsts', '400', '100%'
        )">generated by the static initializer</a>, is essentially a
        repository of &lt;property&gt; class instances and the static
        data from those classes of <span
        class="codefrag">org.apache.fop.fo.property</span>.  The heart
        of this class is the method <span id = "span03" ></span ><a
        href= "javascript:toggleCode( 'span03',
        'PropertyConsts.html#setupProperty', '400', '100%' )"><span
        class="codefrag" >setupProperty</span ></a>.  Whenever access
        to the data or methods of a property class is required, this
        method in the singleton must be called to ensure that an
        instance of the property exists and that the static data from
        that instance has been extracted.
      </p>

      <div class="frame note">
        <div class="label">Note</div>
        <div class="content">
          An alternative to this requirement would be to pre-load all
          of the individual property classes during the system
          initialization phase.  This is not done currently because of
          the start-up expense of the required class loading for over
          three hundred classes, and the relatively low added expense
          of checking for the existence of a property instance before
          every access.  Given that FOP is increasingly used in a
          server environment, it may prove acceptable in the long run
          to change to pre-loading.
        </div>
      </div>

      <p>
        The class name is generated and stored in the <span id =
        "span04" ></span ><a href="javascript:toggleCode( 'span04',
        'PropertyConsts.html#classNames', '400', '100%' )"><span
        class="codefrag" >classNames</span ></a> array; a class
        instance is generated from the name and stored in the <span id
        = "span05" ></span ><a href="javascript:toggleCode( 'span05',
        'PropertyConsts.html#classes', '400', '100%' )"><span
        class="codefrag" >classes</span ></a> array; and an instance
        of the class is generated from the class object and stored in
        the <span id = "span06" ></span ><a
        href="javascript:toggleCode( 'span06',
        'PropertyConsts.html#properties', '400', '100%' )"><span
        class="codefrag" >properties</span ></a> array.
      </p>

      <p>
        The other data gathering facilities and access methods of this
        class will be examined in conjunction with the various types
        of property classes.
      </p>

      <p>
        <strong>Previous:</strong> <a href = "classes-overview.html"
        >Property classes overview</a>
      </p>
      <p>
        <strong>Next:</strong> <a href= "simple-properties.html"
                                  >Simple property classes</a>
      </p>
    </div>
  </body>
</html>
